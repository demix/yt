{"version":3,"sources":["../src/VideoProxy.js"],"names":["VideoProxy","constructor","url","config","Buffer","from","toString","Object","assign","defaultConfig","fetchVideo","_read","options","agent","headers","range","Range","req","res","statusCode","location","destroy","targetHeaders","emit","reduce","target","next","upperNext","split","map","i","slice","toUpperCase","join","push","on","chunk","end"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAEe,MAAMA,UAAN,0BAAkC;;AAG/CC,cAAYC,GAAZ,EAAiBC,MAAjB,EAAyB;AACvB;AACA,SAAKD,GAAL,GAAWE,OAAOC,IAAP,CAAYH,GAAZ,EAAiB,QAAjB,EAA2BI,QAA3B,EAAX;AACA,SAAKH,MAAL,GAAcI,OAAOC,MAAP,CAAc,EAAd,EAAkBR,WAAWS,aAA7B,EAA4CN,MAA5C,CAAd;AACA,SAAKO,UAAL;AACD;;AAEDC,UAAQ,CAEP;;AAEDD,eAAa;AACX,UAAME,UAAU,gBAAM,KAAKV,GAAX,CAAhB;AACA,uBAAW;AACT,YAAMW,QAAQ,4CAAd;AACAD,cAAQC,KAAR,GAAgBA,KAAhB;AACD;AACDD,YAAQE,OAAR,GAAkB;AAChB,oBAAc;AADE,KAAlB;AAGA,QAAI,KAAKX,MAAL,CAAYY,KAAhB,EAAuB;AACrBH,cAAQE,OAAR,CAAgBE,KAAhB,GAAwB,KAAKb,MAAL,CAAYY,KAApC;AACD;AACD,yBAAO,+BAA8B,KAAKb,GAAI,EAA9C;AACA,UAAMe,MAAM,oBAAQL,OAAR,EAAkBM,GAAD,IAAS;AACpC,UAAIA,IAAIC,UAAJ,IAAkB,GAAtB,EAA2B;AACzB,YAAID,IAAIC,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B,+BAAM,0BAAN;AACA,eAAKjB,GAAL,GAAWgB,IAAIJ,OAAJ,CAAYM,QAAvB;AACA,eAAKV,UAAL;AACD,SAJD,MAIO;AACL,+BAAO,wCAAuCQ,IAAIC,UAAW,EAA7D;AACA,eAAKE,OAAL,CAAa,6BAAqBH,IAAIC,UAAzB,CAAb;AACD;AACD;AACD;;AAED,YAAMG,gBAAgB,CACpB,cADoB,EACJ,gBADI,EACc,eADd,EAEpB,eAFoB,CAAtB;;AAKA,WAAKC,IAAL,CAAU,WAAV,EAAuBD,cAAcE,MAAd,CAAqB,CAACC,MAAD,EAASC,IAAT,KAAkB;AAC5D,YAAIR,IAAIJ,OAAJ,CAAYY,IAAZ,CAAJ,EAAuB;AACrB,gBAAMC,YAAYD,KAAKE,KAAL,CAAW,GAAX,EAAgBC,GAAhB,CAAoBC,KACnC,GAAEA,EAAEC,KAAF,CAAQ,CAAR,EAAW,CAAX,EAAcC,WAAd,EAA4B,GAAEF,EAAEC,KAAF,CAAQ,CAAR,CAAW,EAD5B,EAC+BE,IAD/B,CACoC,GADpC,CAAlB;AAEAR,iBAAOS,IAAP,CAAY,CAACP,SAAD,EAAYT,IAAIJ,OAAJ,CAAYY,IAAZ,CAAZ,CAAZ;AACD;AACD,eAAOD,MAAP;AACD,OAPsB,EAOpB,EAPoB,CAAvB;AAQA,WAAKF,IAAL,CAAU,SAAV,EAAqBL,IAAIC,UAAzB;;AAEAD,UAAIiB,EAAJ,CAAO,MAAP,EAAgBC,KAAD,IAAW;AACxB,aAAKF,IAAL,CAAUE,KAAV;AACD,OAFD;AAGAlB,UAAIiB,EAAJ,CAAO,KAAP,EAAc,MAAM;AAClB,6BAAM,gBAAN;AACA,aAAKD,IAAL,CAAU,IAAV;AACD,OAHD;AAID,KAnCW,CAAZ;AAoCAjB,QAAIoB,GAAJ;AACD;AAhE8C;kBAA5BrC,U;AAAAA,U,CACZS,a,GAAgB,E","file":"VideoProxy.js","sourcesContent":["import {Readable} from 'stream'\nimport {request} from 'https'\nimport {parse} from 'url'\nimport HttpsProxyAgent from 'https-proxy-agent'\nimport debug from './debug'\nimport {RequestFailError} from './Errors'\nimport {proxy} from './config'\n\nexport default class VideoProxy extends Readable {\n  static defaultConfig = {}\n\n  constructor(url, config) {\n    super()\n    this.url = Buffer.from(url, 'base64').toString()\n    this.config = Object.assign({}, VideoProxy.defaultConfig, config)\n    this.fetchVideo()\n  }\n\n  _read() {\n\n  }\n\n  fetchVideo() {\n    const options = parse(this.url)\n    if (proxy) {\n      const agent = new HttpsProxyAgent(proxy)\n      options.agent = agent\n    }\n    options.headers = {\n      'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0',\n    }\n    if (this.config.range) {\n      options.headers.Range = this.config.range\n    }\n    debug(`Start fetching video stream ${this.url}`)\n    const req = request(options, (res) => {\n      if (res.statusCode >= 300) {\n        if (res.statusCode === 302) {\n          debug('Redirect to new location')\n          this.url = res.headers.location\n          this.fetchVideo()\n        } else {\n          debug(`Video response error with statusCode ${res.statusCode}`)\n          this.destroy(new RequestFailError(res.statusCode))\n        }\n        return\n      }\n\n      const targetHeaders = [\n        'content-type', 'content-length', 'accept-ranges',\n        'content-range',\n      ]\n\n      this.emit('setHeader', targetHeaders.reduce((target, next) => {\n        if (res.headers[next]) {\n          const upperNext = next.split('-').map(i =>\n            `${i.slice(0, 1).toUpperCase()}${i.slice(1)}`).join('-')\n          target.push([upperNext, res.headers[next]])\n        }\n        return target\n      }, []))\n      this.emit('setCode', res.statusCode)\n\n      res.on('data', (chunk) => {\n        this.push(chunk)\n      })\n      res.on('end', () => {\n        debug('Stream fetched')\n        this.push(null)\n      })\n    })\n    req.end()\n  }\n}\n"]}