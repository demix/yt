{"version":3,"sources":["../src/signature.js"],"names":["Signature","run","name","target","Promise","resolve","reject","sandbox","global","addEventListener","removeEventListener","document","location","navigator","runningVmMap","runInNewContext","finalResult","readFile","cacheFolder","err","data","console","error","script","Script","toString","setTimeout","constructor","url","startsWith","replace","ensure","decrypt","s","then","result","process","cwd","downloadingMap","file","stat","stats","isFile","download","options","agent","body","done","fnNameResult","match","fnName","writeFile","log","tm","res","statusCode","on","chunk","clearTimeout"],"mappings":"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","file":"signature.js","sourcesContent":["import path from 'path'\nimport fs from 'fs'\nimport HttpsProxyAgent from 'https-proxy-agent'\nimport {get} from 'https'\nimport {parse} from 'url'\nimport vm from 'vm'\nimport {proxy} from './config'\nimport debug from './debug'\n\nexport class Signature {\n  static cacheFolder = path.resolve(process.cwd(), '.player.js')\n  static downloadingMap = {}\n  static runningVmMap = {}\n\n  static ensure = async function (name, url) {\n    const file = path.resolve(Signature.cacheFolder, name)\n    return new Promise(resolve => {\n      fs.stat(file, (err, stats) => {\n        if (stats && stats.isFile()) {\n          debug(`Player.js file exists: ${name}`)\n          resolve()\n        } else if (Signature.downloadingMap[name]) {\n          resolve(Signature.downloadingMap[name])\n        } else {\n          Signature.downloadingMap[name] = Signature.download(name, url)\n          resolve(Signature.downloadingMap[name])\n        }\n      })\n    })\n  }\n\n  static download = function (name, url) {\n    const options = parse(url)\n    if (proxy) {\n      const agent = new HttpsProxyAgent(proxy)\n      options.agent = agent\n    }\n    return new Promise(resolve => {\n      let body = ''\n      function done() {\n        debug('Player.js fetched')\n\n        const fnNameResult =\n          body.match(/['\"]signature['\"]\\),.+?\\.set\\(.+?,(.+?)\\(/)\n\n        if (!fnNameResult) {\n          console.error('Can\\'t find decrypt function')\n        }\n        const fnName = fnNameResult[1]\n        body = body.replace(`${fnName}=`, `global.decrypt=${fnName}=`)\n\n        fs.writeFile(path.resolve(Signature.cacheFolder, name), body, (err) => {\n          if (err) {\n            console.log(err)\n            // TODO\n          } else {\n            delete Signature.downloadingMap[name]\n            resolve()\n          }\n        })\n      }\n\n      let tm\n      debug(`Start fetching player.js: ${url}`)\n      get(options, (res) => {\n        if (res.statusCode >= 300) {\n          // resolve()\n          debug(`Player.js fetch error: ${res.statusCode}`)\n          return\n        }\n        res.on('data', (chunk) => {\n          clearTimeout(tm)\n          body += chunk.toString()\n\n          tm = setTimeout(() => {\n            done()\n          }, 3000)\n        })\n        res.on('end', () => {\n          clearTimeout(tm)\n          done()\n        })\n      })\n    })\n  }\n\n  static run(name, target) {\n    return new Promise((resolve, reject) => {\n      const sandbox = {\n        global: {target},\n        addEventListener() {},\n        removeEventListener() {},\n        document: {\n          addEventListener() {},\n        },\n        location: {},\n        navigator: {},\n      }\n      if (Signature.runningVmMap[name]) {\n        Signature.runningVmMap[name].runInNewContext(sandbox)\n        resolve(sandbox.finalResult)\n      } else {\n        fs.readFile(path.resolve(Signature.cacheFolder, name), (err, data) => {\n          if (err) {\n            console.error(err)\n            reject(err)\n            return\n          }\n          const script = new vm.Script(`${data.toString()}; finalResult = global.decrypt(global.target)`)\n          Signature.runningVmMap[name] = script\n          script.runInNewContext(sandbox)\n          setTimeout(() => {\n            delete Signature.runningVmMap[name]\n          }, 5000)\n          resolve(sandbox.finalResult)\n        })\n      }\n    })\n  }\n\n  constructor(url) {\n    if (!url.startsWith('http')) {\n      url = `https://www.youtube.com${url.startsWith('/') ? '' : '/'}${url}`\n    }\n    this.url = url\n    this.name = url.replace(/^https?:\\/\\/[^/]+\\//, '').replace(/\\//g, '_')\n\n    Signature.ensure(this.name, this.url)\n  }\n\n  decrypt(s) {\n    return Signature\n      .ensure(this.name, this.url)\n      .then(() => {\n        return Signature.run(this.name, s)\n      }).then(result => {\n        return result\n      })\n  }\n}\n"]}