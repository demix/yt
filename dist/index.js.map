{"version":3,"sources":["../src/index.js"],"names":["port","process","env","PORT","NotFound","res","e","console","error","statusCode","end","server","createServer","req","host","headers","url","pathname","slice","setHeader","stream","searchParams","get","on","data","write","forEach","name","value","range","code","listen","log"],"mappings":";;AAAA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;;;AAEA,MAAMA,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,CAAvB,EAA0B;AACxB,MAAIA,KAAK,EAAEA,kCAAF,CAAT,EAAwC;AAAEC,YAAQC,KAAR,CAAcF,CAAd;AAAkB;AAC5DD,MAAII,UAAJ,GAAiB,GAAjB;AACAJ,MAAIK,GAAJ,CAAQ,UAAR;AACD;;AAED,MAAMC,SAAS,eAAKC,YAAL,CAAkB,CAACC,GAAD,EAAMR,GAAN,KAAc;AAC7C,QAAM,EAACS,IAAD,KAASD,IAAIE,OAAnB;AACA,uBAAO,2BAA0BD,IAAK,EAAtC;;AAEA,QAAME,MAAM,aAAQH,IAAIG,GAAZ,EAAkB,UAASF,IAAK,EAAhC,CAAZ;;AAEA,UAAQE,IAAIC,QAAJ,CAAaC,KAAb,CAAmB,CAAnB,CAAR;AACE,SAAK,MAAL;AAAa;AACXb,YAAIc,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAd,YAAIc,SAAJ,CAAc,cAAd,EAA8B,kBAA9B;AACA,cAAMC,SAAS,wBAAUJ,IAAIK,YAAJ,CAAiBC,GAAjB,CAAqB,GAArB,CAAV,EAAqCR,IAArC,CAAf;AACAM,eAAOG,EAAP,CAAU,OAAV,EAAoBjB,CAAD,IAAOF,SAASC,GAAT,EAAcC,CAAd,CAA1B;AACAc,eAAOG,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAU;AAC1BnB,cAAIoB,KAAJ,CAAUD,IAAV;AACD,SAFD;AAGAJ,eAAOG,EAAP,CAAU,WAAV,EAAwBC,IAAD,IAAU;AAC/BA,eAAKE,OAAL,CAAa,CAAC,CAACC,IAAD,EAAOC,KAAP,CAAD,KAAmB;AAC9BvB,gBAAIc,SAAJ,CAAcQ,IAAd,EAAoBC,KAApB;AACD,WAFD;AAGD,SAJD;AAKAR,eAAOG,EAAP,CAAU,KAAV,EAAiB,MAAM;AACrBlB,cAAIK,GAAJ;AACD,SAFD;AAGA;AACD;AACD,SAAK,OAAL;AAAc;AACZ,cAAMU,SAAS,yBAAeJ,IAAIK,YAAJ,CAAiBC,GAAjB,CAAqB,KAArB,CAAf,EAA4C;AACzDO,iBAAOhB,IAAIE,OAAJ,CAAYc;AADsC,SAA5C,CAAf;AAGAxB,YAAIc,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACAC,eAAOG,EAAP,CAAU,WAAV,EAAwBC,IAAD,IAAU;AAC/BA,eAAKE,OAAL,CAAa,CAAC,CAACC,IAAD,EAAOC,KAAP,CAAD,KAAmB;AAC9BvB,gBAAIc,SAAJ,CAAcQ,IAAd,EAAoBC,KAApB;AACD,WAFD;AAGD,SAJD;AAKAR,eAAOG,EAAP,CAAU,SAAV,EAAsBO,IAAD,IAAU;AAC7BzB,cAAII,UAAJ,GAAiBqB,IAAjB;AACD,SAFD;AAGAV,eAAOG,EAAP,CAAU,OAAV,EAAoBjB,CAAD,IAAOF,SAASC,GAAT,EAAcC,CAAd,CAA1B;AACAc,eAAOG,EAAP,CAAU,MAAV,EAAmBC,IAAD,IAAU;AAC1BnB,cAAIoB,KAAJ,CAAUD,IAAV;AACD,SAFD;AAGAJ,eAAOG,EAAP,CAAU,KAAV,EAAiB,MAAMlB,IAAIK,GAAJ,EAAvB;AACA;AACD;AACD;AAAS;AACPN,iBAASC,GAAT;AACD;AAzCH;AA2CD,CAjDc,CAAf;;AAmDAM,OAAOoB,MAAP,CAAc/B,IAAd;AACAO,QAAQyB,GAAR,CAAa,uBAAsBhC,IAAK,EAAxC","file":"index.js","sourcesContent":["import http from 'http'\nimport {URL} from 'url'\nimport {loadVideo} from './youtube'\nimport {NotFoundError} from './Errors'\nimport VideoProxy from './VideoProxy'\nimport debug from './debug'\n\nconst port = process.env.PORT || 8006\n\nfunction NotFound(res, e) {\n  if (e && !(e instanceof NotFoundError)) { console.error(e) }\n  res.statusCode = 404\n  res.end('NotFound')\n}\n\nconst server = http.createServer((req, res) => {\n  const {host} = req.headers\n  debug(`Serve request with host ${host}`)\n\n  const url = new URL(req.url, `http://${host}`)\n\n  switch (url.pathname.slice(1)) {\n    case 'info': {\n      res.setHeader('Access-Control-Allow-Origin', '*')\n      res.setHeader('Content-Type', 'application/json')\n      const stream = loadVideo(url.searchParams.get('v'), host)\n      stream.on('error', (e) => NotFound(res, e))\n      stream.on('data', (data) => {\n        res.write(data)\n      })\n      stream.on('setHeader', (data) => {\n        data.forEach(([name, value]) => {\n          res.setHeader(name, value)\n        })\n      })\n      stream.on('end', () => {\n        res.end()\n      })\n      return\n    }\n    case 'watch': {\n      const stream = new VideoProxy(url.searchParams.get('url'), {\n        range: req.headers.range,\n      })\n      res.setHeader('Access-Control-Allow-Origin', '*')\n      stream.on('setHeader', (data) => {\n        data.forEach(([name, value]) => {\n          res.setHeader(name, value)\n        })\n      })\n      stream.on('setCode', (code) => {\n        res.statusCode = code\n      })\n      stream.on('error', (e) => NotFound(res, e))\n      stream.on('data', (data) => {\n        res.write(data)\n      })\n      stream.on('end', () => res.end())\n      return\n    }\n    default: {\n      NotFound(res)\n    }\n  }\n})\n\nserver.listen(port)\nconsole.log(`Server listening on ${port}`)\n"]}